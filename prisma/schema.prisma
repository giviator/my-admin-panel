generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Homepage {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  updatedAt   DateTime @updatedAt
}

model Product {
  id             Int               @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  categoryId     Int?
  category       Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  searchTreeId   Int?
  searchTree     SearchTree?       @relation(fields: [searchTreeId], references: [id], onDelete: SetNull)
  characteristics ProductCharacteristic[]
  images         ProductImage[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ProductCharacteristic {
  id          Int      @id @default(autoincrement())
  name        String
  value       String
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  url         String
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String      @unique
  description String?
  image       String?
  imageUrl    String?     // Додаємо поле для URL картинки
  
  // SEO fields
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?
  
  // Tree structure
  parentId    Int?
  parent      Category?   @relation("CategoryTree", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[]  @relation("CategoryTree")
  
  // Relations
  products    Product[]
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([parentId])
  @@index([slug])
}

model SearchTree {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  description String?
  icon        String?       // Icon for the search tree node
  
  // Tree structure
  parentId    Int?
  parent      SearchTree?   @relation("SearchTreeHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    SearchTree[]  @relation("SearchTreeHierarchy")
  
  // Relations
  products    Product[]
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([parentId])
  @@index([slug])
}